{"version":3,"sources":["elements/text-input.tsx","props/propsContext.tsx","props/withProps.tsx","pages/common/login.page.tsx","pages/common/dashboard.page.tsx","redux/global/history.js","App.tsx","serviceWorker.ts","redux/helpers/storage.helper.js","redux/api-middleware/login.js","redux/redux-modules/userinfo/actions.js","redux/redux-modules/userinfo/sagas.js","redux/redux-modules/root.saga.js","redux/redux-modules/userinfo/reducer.js","redux/redux-modules/root.reducer.js","redux/store/index.js","pages/common/login.page.container.tsx","AppContainer.tsx","index.tsx","props/makeAppContext.ts"],"names":["TextInput","props","handleChange","e","validate","onChange","setState","isValid","required","target","value","errormessage","placeholder","minLength","length","maxLength","state","this","TextField","error","name","label","className","React","PropsContext","createContext","Warning","withStyles","theme","container","display","flexDirection","justifyContent","alignItems","height","typography","pxToRem","backgroundColor","palette","common","darkWhite","color","lightBlack","contract","classes","withProps","instanceName","WrappedComponent","Consumer","context","Hoc","coalescedInstanceName","Login","handleSubmit","console","log","login","isLoading","userName","password","loginSubmit","style","marginTop","Button","variant","onClick","Dashboard","history","createBrowserHistory","App","handleDrawerOpen","drawerOpen","handleDrawerClose","isLoggedin","isMenuOpen","AppBar","position","classNames","appBar","appBarShift","Toolbar","disableGutters","IconButton","aria-label","menuButton","hide","Drawer","drawer","drawerClose","paper","open","toolbar","direction","Divider","List","map","text","index","ListItem","button","key","ListItemIcon","ListItemText","primary","exact","path","component","createStyles","root","zIndex","transition","transitions","create","easing","sharp","duration","leavingScreen","marginLeft","width","enteringScreen","marginRight","flexShrink","whiteSpace","overflowX","padding","mixins","content","flexGrow","withTheme","Boolean","window","location","hostname","match","setStorage","amplifyStore","model","url","a","data","response","status","code","id_token","ERROR","LOGIN_REQUEST_START","LOGIN_REQUEST","LOGIN_SUCCESS","appLogin","appLoginWatcher","watchAppLogin","action","put","type","actions","call","push","takeEvery","all","initialState","loading","isMenuClose","date","Date","startLoading","handlers","rootReducer","combineReducers","LoginReducer","handler","sagaMiddleWare","createSagaMiddleware","store","createStore","applyMiddleware","sagas","forEach","run","LoginPageAppContainer","connect","dispatch","load","children","defaultProps","Error","AppPageContainer","ReactDOM","render","Provider","IAppProps","ILoginPageProps","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c1ff736c.chunk.js","sourcesContent":["import * as React from \"react\";\n\nimport { TextField } from \"@material-ui/core\";\n\nexport interface ITextInputProps {\n  onChange: (e: any) => any;\n  required: boolean;\n  minLength: number;\n  maxLength: number;\n  value: string;\n  placeholder: string;\n  label: string;\n  name: string;\n}\nexport interface ITextInputState {\n  isValid: boolean;\n  errormessage: string;\n}\nclass TextInput extends React.Component<ITextInputProps, ITextInputState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      errormessage: \"\",\n      isValid: true\n    };\n  }\n  public handleChange = (e: any) => {\n    this.validate(e);\n    if (this.props.onChange(e)) {\n      this.props.onChange(e);\n    }\n  };\n  public validate = (e: any) => {\n    this.setState({\n      isValid: true\n    });\n    if (this.props.required && e.target.value === \"\") {\n      this.setState({\n        errormessage: `${e.target.placeholder} is required`,\n        isValid: false\n      });\n    } else if (\n      this.props.minLength &&\n      e.target.value.length < this.props.minLength\n    ) {\n      this.setState({\n        errormessage: `${e.target.placeholder} lenth should be grater than ${\n          this.props.minLength\n        }`,\n        isValid: false\n      });\n    } else if (\n      this.props.maxLength &&\n      e.target.value.length > this.props.maxLength\n    ) {\n      this.setState({\n        errormessage: `${e.target.placeholder} lenth should be less than ${\n          this.props.maxLength\n        }`,\n        isValid: false\n      });\n    }\n  };\n  public render() {\n    const { value } = this.props;\n    return (\n      <div>\n        <TextField\n          error={!this.state.isValid}\n          name={this.props.name}\n          value={value}\n          label={this.props.label}\n          placeholder={this.props.placeholder}\n          onChange={this.handleChange}\n        />\n        {this.state.isValid === false && (\n          <div>\n            <span className=\"error-message\">{this.state.errormessage} </span>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default TextInput;\n","import React from \"react\";\n\nexport interface IPropsContextModel {\n  IAppProps: React.ComponentType<any>;\n  ILoginPageProps: React.ComponentType<any>;\n}\nexport const PropsContext = React.createContext({});\n","import { withStyles } from \"@material-ui/core\";\nimport * as React from \"react\";\nimport { IThemeModel } from \"../theme/theme\";\nimport { IPropsContextModel, PropsContext } from \"./propsContext\";\n\nconst styles = (theme: IThemeModel) => ({\n  container: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: theme.typography.pxToRem(70),\n    // backgroundColor: theme.palette.background.paper,\n    backgroundColor: theme.palette.common.darkWhite,\n    color: theme.palette.common.lightBlack\n  }\n});\n\n// @ts-ignore\nexport const Warning = withStyles(styles)((props: any) => {\n  const { contract, classes } = props;\n\n  return (\n    <div className={classes.container}>\n      <span>Missing Prop Container for {contract}</span>\n    </div>\n  );\n});\n\nexport const withProps = (\n  contract: keyof IPropsContextModel,\n  instanceName?: string\n) => (WrappedComponent: React.ComponentType<any>) => (props: any) => (\n  // @ts-ignore\n  <PropsContext.Consumer>\n    {\n      // @ts-ignore\n    }\n    {(context: IPropsContextModel) => {\n      debugger;\n      let Hoc = context[contract] as React.ComponentType;\n      const coalescedInstanceName = props.instanceName || instanceName;\n      if (coalescedInstanceName) {\n        const lookup = Hoc as any;\n        Hoc = lookup[coalescedInstanceName] as React.ComponentType;\n      }\n      if (!Hoc) return <Warning contract={contract} />;\n\n      return (\n        <Hoc {...props}>\n          <WrappedComponent {...props} />\n        </Hoc>\n      );\n    }}\n  </PropsContext.Consumer>\n);\n","import * as React from \"react\";\n\nimport Button from \"@material-ui/core/Button\";\nimport TextInput from \"../../elements/text-input\";\nimport { withProps } from \"../../props/withProps\";\nimport { mapDispatchToProps, mapStateToProps } from \"./login.page.container\";\n\nexport interface ILoginPageProps {\n  load?: boolean;\n  loginSubmit(model: any): void;\n}\nexport interface ILoginPageState {\n  isLoading: boolean;\n  login: {\n    userName: string;\n    password: string;\n  };\n}\n\n// @ts-ignore\n@withProps(\"ILoginPageProps\")\nclass Login extends React.Component<ILoginPageProps, ILoginPageState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      login: {\n        userName: \"\",\n        password: \"\"\n      }\n    };\n  }\n  public handleSubmit = (e: any) => {\n    console.log(e);\n  };\n  public handleChange = (e: any) => {\n    const { login } = this.state;\n    const { name, value } = e.target;\n\n    this.setState({\n      login: {\n        ...login,\n        [name]: value\n      }\n    });\n  };\n  public render() {\n    const { login } = this.state;\n    const { loginSubmit } = this.props;\n    return (\n      <div style={{ marginTop: \"155px\" }}>\n        Login\n        <form name=\"loginForm\">\n          <TextInput\n            onChange={this.handleChange}\n            value={login.userName}\n            required={true}\n            minLength={4}\n            label=\"User Name\"\n            name=\"userName\"\n            placeholder=\"User Name\"\n            maxLength={20}\n          />\n          <br />\n          <TextInput\n            onChange={this.handleChange}\n            value={login.password}\n            required={true}\n            minLength={4}\n            label=\"Password\"\n            name=\"password\"\n            placeholder=\"Password\"\n            maxLength={10}\n          />\n          <br />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              loginSubmit(login);\n            }}\n          >\n            Login\n          </Button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import * as React from \"react\";\n\nclass Dashboard extends React.Component {\n  public render() {\n    return (\n      <div>\n        <div>jiji</div>\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n","import { createBrowserHistory } from \"history\";\nconst history = createBrowserHistory();\nexport default history;\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"./App.css\";\n// import { PrivateRoute } from \"./common/private-route\";\nimport logo from \"./logo.svg\";\nimport Login from \"./pages/common/login.page\";\nimport Dashboard from \"./pages/common/dashboard.page\";\nimport history from \"./redux/global/history\";\nimport { Route, Router } from \"react-router\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport MailIcon from \"@material-ui/icons/Mail\";\nimport { IThemeModel } from \"../src/theme/theme\";\nimport { withProps } from \"./props/withProps\";\n\nimport classNames from \"classnames\";\n\nimport {\n  List,\n  IconButton,\n  Divider,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  createStyles\n} from \"@material-ui/core\";\n\nconst drawerWidth = 240;\nconst styles = (theme: IThemeModel) =>\n  createStyles({\n    root: {\n      display: \"flex\"\n    },\n    appBar: {\n      zIndex: theme.zIndex.drawer + 1,\n      transition: theme.transitions.create([\"width\", \"margin\"], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen\n      })\n    },\n    appBarShift: {\n      marginLeft: drawerWidth,\n      width: `calc(100% - ${drawerWidth}px)`,\n      transition: theme.transitions.create([\"width\", \"margin\"], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen\n      })\n    },\n    menuButton: {\n      marginLeft: 12,\n      marginRight: 36\n    },\n    hide: {\n      display: \"none\"\n    },\n    drawer: {\n      width: drawerWidth,\n      flexShrink: 0,\n      whiteSpace: \"nowrap\"\n    },\n    drawerOpen: {\n      width: drawerWidth,\n      transition: theme.transitions.create(\"width\", {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen\n      })\n    },\n    drawerClose: {\n      transition: theme.transitions.create(\"width\", {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen\n      }),\n      overflowX: \"hidden\"\n      // width: theme.spacing.unit * 7 + 1,\n      // [theme.breakpoints.up(\"sm\")]: {\n      //   width: theme.spacing.unit * 9 + 1\n      // }\n    },\n    toolbar: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-end\",\n      padding: \"0 8px\",\n      ...theme.mixins.toolbar\n    },\n    content: {\n      flexGrow: 1\n    }\n  });\n\nexport interface IAppProps {\n  isLoggedin: boolean;\n  isMenuOpen: boolean;\n  isMenuClose: boolean;\n  loading: boolean;\n  classes: any;\n  theme: any;\n  drawerOpen: (e: any) => void;\n  drawerClose: (e: any) => void;\n}\n\nexport interface IAppState {\n  open: boolean;\n  close: boolean;\n}\n\n// @ts-ignore\n@withProps(\"IAppProps\")\nclass App extends React.Component<IAppProps, IAppState> {\n  constructor(props: any) {\n    super(props);\n    // this.state = { open: false, close: false };\n  }\n  public handleDrawerOpen = () => {\n    // this.setState({ open: true });\n    this.props.drawerOpen(true);\n  };\n\n  public handleDrawerClose = () => {\n    // this.setState({ open: false });\n    this.props.drawerOpen(false);\n  };\n  // public getDerivedStateFromProps(props: any) {\n  //   const ppp = this.props;\n  // }\n  public render() {\n    const { classes, theme, isLoggedin, isMenuOpen } = this.props;\n    return (\n      <div className=\"App\">\n        <Router history={history}>\n          <div>\n            <AppBar\n              position=\"fixed\"\n              className={classNames(classes.appBar, {\n                [classes.appBarShift]: isMenuOpen\n              })}\n            >\n              <Toolbar disableGutters={!isMenuOpen}>\n                <IconButton\n                  color=\"inherit\"\n                  aria-label=\"Open drawer\"\n                  onClick={this.handleDrawerOpen}\n                  className={classNames(classes.menuButton, {\n                    [classes.hide]: isMenuOpen\n                  })}\n                >\n                  <MenuIcon />\n                </IconButton>\n              </Toolbar>\n            </AppBar>\n            {isLoggedin && (\n              <Drawer\n                variant=\"permanent\"\n                className={classNames(classes.drawer, {\n                  [classes.drawerOpen]: isMenuOpen,\n                  [classes.drawerClose]: !isMenuOpen\n                })}\n                classes={{\n                  paper: classNames({\n                    [classes.drawerOpen]: isMenuOpen,\n                    [classes.drawerClose]: !isMenuOpen\n                  })\n                }}\n                open={isMenuOpen}\n              >\n                <div className={classes.toolbar}>\n                  <IconButton onClick={this.handleDrawerClose}>\n                    {theme.direction === \"rtl\" ? (\n                      <ChevronRightIcon />\n                    ) : (\n                      <ChevronLeftIcon />\n                    )}\n                  </IconButton>\n                </div>\n                <Divider />\n                <List>\n                  {[\"Inbox\", \"Starred\", \"Send email\", \"Drafts\"].map(\n                    (text, index) => (\n                      <ListItem button={true} key={text}>\n                        <ListItemIcon>\n                          {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n                        </ListItemIcon>\n                        <ListItemText primary={text} />\n                      </ListItem>\n                    )\n                  )}\n                </List>\n                <Divider />\n                <List>\n                  {[\"All mail\", \"Trash\", \"Spam\"].map((text, index) => (\n                    <ListItem button={true} key={text}>\n                      <ListItemIcon>\n                        {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n                      </ListItemIcon>\n                      <ListItemText primary={text} />\n                    </ListItem>\n                  ))}\n                </List>\n              </Drawer>\n            )}\n\n            <div>\n              {/* {loading == true && (\n                  <div className=\"dv-loader\">\n                    <div className=\"loader\" />\n                  </div>\n                )} */}\n              {/* <PrivateRoute path=\"/\" component={Login} /> */}\n              <Route exact={true} path=\"/\" component={Login} />\n              <Route exact={true} path=\"/login\" component={Login} />\n              <Route exact={true} path=\"/dashboard\" component={Dashboard} />\n            </div>\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\n// @ts-ignore\nexport default withStyles(styles, { withTheme: true })(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as amplifyStore from \"amplify-store\";\n\nexport const setStorage = (key, value) => {\n  amplifyStore(key, value);\n};\n\nexport const getStorage = key => {\n  return amplifyStore(key);\n};\n\nexport const clearStorage = key => {\n  amplifyStore(key, null);\n};\nexport const clearAll = () => {\n  const storageArray = [\"id_token\", \"id_token\"];\n  for (const storageItem of storageArray) {\n    this.ClearStorage(storageItem);\n  }\n};\n","import { BASE_URL } from \"../environment\";\nimport axios from \"axios\";\nimport { setStorage } from \"../helpers/storage.helper\";\nconst login = async (model, url) => {\n  // const data =\n  //   \"username=\" +\n  //   model.userName +\n  //   \"&password=\" +\n  //   model.password +\n  //   \"&clientid=Website&grant_type=password\";\n  const data = {\n    userName: model.userName,\n    password: model.password\n    // clientid: \"Website\",\n    // grant_type: \"password\"\n  };\n  setStorage(\"id_token\", 'xyz');\n  return { data: { \"id_token\": 'xyz', name: 'praveen' } };\n  axios.defaults.baseURL = BASE_URL;\n  axios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\n  const response = await axios.post(url, data);\n\n  if (response.status !== 200) {\n    return { error: { code: response.status } };\n  }\n\n  setStorage(\"id_token\", response.data.id_token);\n  return { data: response.data };\n};\n\nexport { login };\n","export const ERROR = \"ERROR\";\nexport const LOGIN_REQUEST_START = \"LOGIN_REQUEST_START\";\nexport const LOGIN_REQUEST = \"LOGIN_REQUEST\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGOUT = \"LOGOUT\";\nexport const FORGOT_REQUEST = \"FORGOT_REQUEST\";\nexport const FORGOT_SUCCESS = \"FORGOT_SUCCESS\";\nexport const OTP_REQUEST = \"OTP_REQUEST\";\nexport const OTP_SUCCESS = \"OTP_SUCCESS\";\nexport const REGISTRATION_REQUEST = \"REGISTRATION_REQUEST\";\nexport const REGISTRATION_SUCCESS = \"REGISTRATION_SUCCESS\";\nexport const SUBSCRIPTIONS_REQUEST = \"SUBSCRIPTIONS_REQUEST\";\nexport const SUBSCRIPTION_SUCCESS = \"SUBSCRIPTION_SUCCESS\";\n\nexport const MENU_OPEN = \"MENU_OPEN\";\nexport const LOGGED_IN = \"LOGGED_IN\";\nexport const MENU_CLOSE = \"MENU_CLOSE\";\n","import { takeEvery, call, put, cancel, all } from \"redux-saga/effects\";\nimport history from \"../../global/history\";\n\nimport { login } from \"../../api-middleware/login\";\nimport * as actions from \"./actions\";\n\nfunction* appLogin(action) {\n  try {\n    yield put({ type: actions.LOGIN_REQUEST_START });\n    const response = yield call(login, action.model, \"token\");\n    yield put({ type: actions.LOGIN_SUCCESS, data: response.data });\n    history.push(\"dashboard\");\n  } catch (error) {\n    yield put({ type: actions.ERROR, error });\n  }\n}\nfunction* appLoginWatcher() {\n  yield takeEvery(actions.LOGIN_REQUEST, appLogin);\n}\nfunction* watchAppLogin() {\n  yield all([appLoginWatcher()]);\n}\n\nexport default [watchAppLogin];\n","import watchAppLogin from \"./userinfo/sagas\";\n\nexport default [...watchAppLogin];\n","import * as actions from \"./actions\";\nimport Immutable from \"immutable\";\nimport {\n  checkUserSession,\n  deleteUserSession\n} from \"../../helpers/authentication.helper\";\n// const initialState = Immutable.fromJS({\n//   loading: false,\n//   data: {},\n//   isLoggedin: false,\n//   isMenuOpen: false,\n//   isMenuClose: false,\n//   date: new Date()\n// });\n\nconst initialState = {\n  loading: false,\n  data: {},\n  isLoggedin: false,\n  isMenuOpen: false,\n  isMenuClose: false,\n  date: new Date()\n};\n\n// const startLoading = (state, action) => {\n//   state.set(\"isLoggedin\", false);\n//   state.set(\"isMenuOpen\", false);\n//   state.set(\"isMenuClose\", true);\n//   state.set(\"loading\", false);\n//   return state;\n// };\n\n// const loginResponse = (state, action) => {\n//   const isLoggedin = checkUserSession();\n//   // state.set(\"isLoggedin\", isLoggedin);\n//   // state.set(\"date\", new Date());\n//   // state.set(\"isMenuOpen\", true);\n//   // state.set(\"isMenuClose\", false);\n//   // state.set(\"loading\", false);\n//   const newState = { ...state };\n//   return newState;\n// };\nconst loginResponse = (state, action) => {\n  state = state.isLoggedin = true;\n  return { ...state, isLoggedin: true, isMenuOpen: true };\n};\nconst startLoading = (state, action) => {\n  state = state.isLoggedin = false;\n  return { ...state, isLoggedin: false };\n};\n\n// const logout = (state, action) => {\n//   deleteUserSession();\n//   state.set(\"isLoggedin\", false);\n//   state.set(\"isMenuOpen\", false);\n//   state.set(\"isMenuClose\", true);\n//   state.set(\"loading\", false);\n//   return state;\n// };\n\nconst handlers = {\n  [actions.LOGIN_REQUEST]: startLoading,\n  [actions.LOGIN_SUCCESS]: loginResponse,\n  [actions.LOGIN_REQUEST_START]: startLoading\n};\n\nexport default (state = initialState, action) => {\n  const handler = handlers[action.type];\n  if (typeof handler === \"undefined\") return state;\n  return handler(state, action);\n};\n","import { combineReducers } from \"redux\";\nimport LoginReducer from \"./userinfo/reducer\";\nconst rootReducer = combineReducers({\n  LoginReducer\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware, combineReducers } from \"redux\";\n\nimport createSagaMiddleware from \"redux-saga\";\nimport sagas from \"../redux-modules/root.saga\";\nimport rootReducer from \"../redux-modules/root.reducer\";\n\nconst sagaMiddleWare = createSagaMiddleware();\n\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleWare));\nsagas.forEach(sagaMiddleWare.run);\nexport default store;\n","// @ts-ignore\nimport * as actions from \"../../redux/redux-modules/userinfo/actions\";\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { ILoginPageProps } from \"./login.page\";\n\nexport interface ILoginPageContainerProps {\n  history?: any;\n  match?: any;\n  dispatch?: (action: any) => void;\n  load: boolean;\n  loginSubmit(model: any): void;\n}\n\nexport const mapStateToProps = (state: any) => {\n  return { state };\n};\nexport const mapDispatchToProps = (dispatch: any) => ({\n  loginSubmit: (model: any) => dispatch({ model, type: actions.LOGIN_REQUEST })\n});\n\n// @ts-ignore\n@connect(\n  mapStateToProps,\n  null\n)\nexport class LoginPageAppContainer extends React.PureComponent<\n  ILoginPageContainerProps\n> {\n  public static defaultProps = {\n    dispatch: () => new Error(\"\")\n  };\n  // constructor(props: any) {\n  //   super(props);\n  // }\n  /**\n   * loginSubmit\n   */\n  public loginSubmit = (model: any) => {\n    const { dispatch } = this.props;\n    if (dispatch) {\n      dispatch({ model, type: actions.LOGIN_REQUEST });\n    }\n  };\n  public render() {\n    debugger;\n    const { load } = this.props;\n    const { loginSubmit } = this;\n    return React.cloneElement(\n      this.props.children as React.ReactElement<ILoginPageProps>,\n      {\n        load,\n        loginSubmit\n      }\n    );\n  }\n}\n","// @ts-ignore\nimport * as actions from \"./redux/redux-modules/userinfo/actions\";\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { IAppProps } from \"./App\";\n\nexport const mapStateToProps = (state: any) => {\n  const props: IAppContainerProps = {};\n  return props;\n};\nexport const mapDispatchToProps = (dispatch: any) => ({\n  drawerOpen: (isMenuOpen: boolean) =>\n    dispatch({ isMenuOpen, type: actions.LOGIN_REQUEST })\n});\n\nexport interface IAppContainerProps {}\n\n// @ts-ignore\n@connect(\n  mapStateToProps,\n  mapDispatchToProps\n)\nexport class AppPageContainer extends React.PureComponent<IAppContainerProps> {\n  public static defaultProps = {\n    dispatch: () => new Error(\"\")\n  };\n\n  public render() {\n    return React.cloneElement(\n      this.props.children as React.ReactElement<IAppProps>,\n      {}\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store/index\";\nimport \"./index.css\";\nimport { makeAppContext } from \"../src/props/makeAppContext\";\nimport { PropsContext } from \"../src/props/propsContext\";\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\nReactDOM.render(\n  <Provider store={store}>\n    <PropsContext.Provider value={makeAppContext()}>\n      <App />\n    </PropsContext.Provider>\n  </Provider>,\n  document.getElementById(\"root\") as HTMLElement\n);\nserviceWorker.unregister();\n","import React from \"react\";\nimport { LoginPageAppContainer } from \"../pages/common/login.page.container\";\nimport { IPropsContextModel } from \"./propsContext\";\nimport { AppPageContainer } from \"../AppContainer\";\n\nexport const makeAppContext: () => IPropsContextModel = () => ({\n  IAppProps: AppPageContainer,\n  ILoginPageProps: LoginPageAppContainer\n});\n"],"sourceRoot":""}